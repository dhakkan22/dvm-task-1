import openpyxl
import csv

class Course:
    def _init_(self, course_code, course_name):
        self.course_code = course_code
        self.course_name = course_name
        self.sections = []

    def get_all_sections(self):
        return self.sections

    def _str_(self):
        return f"{self.course_code} - {self.course_name}"

    def populate_section(self, section):
        self.sections.append(section)


class Section:
    def _init_(self, section_id, day, slots):
        self.section_id = section_id
        self.day = day
        self.slots = slots


class Timetable:
    def _init_(self):
        self.courses = []

    def enroll_subject(self, course):
        self.courses.append(course)

    def check_clashes(self):
        for course in self.courses:
            sections = course.get_all_sections()

            occupied_slots = {day: set() for day in ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]}

            for section in sections:
                day = section.day
                slots = section.slots

                if not occupied_slots[day].isdisjoint(slots):
                    print(f"Clash detected for {course.course_code} - {course.course_name}, Section {section.section_id} on {day}")

                occupied_slots[day].update(slots)

    def export_to_csv(self, filename):
        with open(filename, mode='w', newline='') as csv_file:
            fieldnames = ['Course Code', 'Course Name', 'Section ID', 'Day', 'Slots']
            writer = csv.DictWriter(csv_file, fieldnames=fieldnames)

            writer.writeheader()

            for course in self.courses:
                course_code = course.course_code
                course_name = course.course_name

                for section in course.get_all_sections():
                    section_id = section.section_id
                    day = section.day
                    slots = section.slots

                    writer.writerow({
                        'Course Code': course_code,
                        'Course Name': course_name,
                        'Section ID': section_id,
                        'Day': day,
                        'Slots': slots,
                    })


def populate_course(file_path, timetable):
    workbook = openpyxl.load_workbook(file_path)

    course_sheet = workbook.active

    for row in course_sheet.iter_rows(min_row=2, values_only=True):
        course_code, course_name = row

        new_course = Course(course_code, course_name)

        timetable.enroll_subject(new_course)

    workbook.save(file_path)


if __name__== "_main_":
    my_timetable = Timetable()

    populate_course("path/to/your/excel/file.xlsx", my_timetable)

    for course in my_timetable.courses:
        print(course)

    my_timetable.check_clashes()

    my_timetable.export_to_csv("path/to/your/output/timetable.csv")
   
    import openpyxl
    import csv

class Course:
    def _init_(self, course_code, course_name):
        self.course_code = course_code
        self.course_name = course_name
        self.sections = []

    def get_all_sections(self):
        return self.sections

    def _str_(self):
        return f"{self.course_code} - {self.course_name}"

    def populate_section(self, section):
        self.sections.append(section)


class Section:
    def _init_(self, section_id, day, slots):
        self.section_id = section_id
        self.day = day
        self.slots = slots


class Timetable:
    def _init_(self):
        self.courses = []

    def enroll_subject(self, course):
        self.courses.append(course)

    def check_clashes(self):
        for course in self.courses:
            sections = course.get_all_sections()

            occupied_slots = {day: set() for day in ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]}

            for section in sections:
                day = section.day
                slots = section.slots

                if not occupied_slots[day].isdisjoint(slots):
                    print(f"Clash detected for {course.course_code} - {course.course_name}, Section {section.section_id} on {day}")

                occupied_slots[day].update(slots)

    def export_to_csv(self, filename):
        with open(filename, mode='w', newline='') as csv_file:
            fieldnames = ['Course Code', 'Course Name', 'Section ID', 'Day', 'Slots']
            writer = csv.DictWriter(csv_file, fieldnames=fieldnames)

            writer.writeheader()

            for course in self.courses:
                course_code = course.course_code
                course_name = course.course_name

                for section in course.get_all_sections():
                    section_id = section.section_id
                    day = section.day
                    slots = section.slots

                    writer.writerow({
                        'Course Code': course_code,
                        'Course Name': course_name,
                        'Section ID': section_id,
                        'Day': day,
                        'Slots': slots,
                    })


def populate_course(file_path, timetable):
    workbook = openpyxl.load_workbook(file_path)

    course_sheet = workbook.active

    for row in course_sheet.iter_rows(min_row=2, values_only=True):
        course_code, course_name = row

        new_course = Course(course_code, course_name)

        timetable.enroll_subject(new_course)

    workbook.save(file_path)


if __name__ == "_main_":
    my_timetable = Timetable()

    populate_course("path/to/your/excel/file.xlsx", my_timetable)

    for course in my_timetable.courses:
        print(course)

    my_timetable.check_clashes()

    my_timetable.export_to_csv("path/to/your/output/timetable.csv")
